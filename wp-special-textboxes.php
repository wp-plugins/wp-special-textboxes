<?php
/*
Plugin Name: wp-special-textboxes
Plugin URI: http://simplelib.co.cc/?p=11
Description: Adds simple colored text boxes to highlight some portion of post text. Use it for highlights warnings, alerts, infos and downloads in your blog posts. Visit <a href="http://simplelib.co.cc/">SimpleLib blog</a> for more details.
Version: 1.0.1
Author: minimus
Author URI: http://blogovod.co.cc
*/

/*  Copyright 2009, minimus  (email : minimus.blogovod@gmail.com)

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

if (!class_exists("SpecialTextBoxes")) {
	class SpecialTextBoxes {
		var $adminOptionsName = "SpecialTextBoxesAdminOptions";
		function SpecialTextBoxes() { //constructor
			//load language
			$plugin_dir = basename(dirname(__FILE__));
			if (function_exists( 'load_plugin_textdomain' ))
				load_plugin_textdomain( 'wp-special-textboxes', 'wp-content/plugins/' . $plugin_dir, $plugin_dir );
			
			//Actions and Shortcodes
			add_action('admin_menu', array(&$this, 'regAdminPage'));
			add_action('wp_head', array(&$this, 'addHeaderCSS'), 1);
			add_action('activate_wp-special-textboxes/wp-special-textboxes.php',  array(&$this, 'init'));
			add_shortcode('stextbox', array(&$this, 'doShortcode'));
			add_shortcode('sgreybox', array(&$this, 'doShortcodeGrey'));
		}
		
		function init() {
			$this->getAdminOptions();
		}
		
		//Returns an array of admin options
		function getAdminOptions() {
			$stextboxesAdminOptions = array( 'rounded_corners' => 'true', 
				'text_shadow' => 'false', 
				'box_shadow' => 'false', 
				'border_style' => 'solid' );
			$stextboxesOptions = get_option($this->adminOptionsName);
			if (!empty($stextboxesOptions)) {
				foreach ($stextboxesOptions as $key => $option)
					$stextboxesAdminOptions[$key] = $option;
			}
			update_option($this->adminOptionsName, $stextboxesAdminOptions);
			return $stextboxesAdminOptions;
		}
		
		function addHeaderCSS() {
			$stextboxesOptions = $this->getAdminOptions();
			$borderStyle = $stextboxesOptions['border_style'];
			echo "\n".'<!-- Start Of Script Generated By wp-special-textboxes 0.2.1 -->'."\n";
			echo '<style>'."\n";
			echo ".alert_box { border: 1px {$borderStyle} #FF4F4A; }"."\n";
			echo ".download_box { border: 1px {$borderStyle} #65ADFE; }"."\n";
			echo ".grey_box { border: 1px {$borderStyle} #BBBBBB; }"."\n";
			echo ".info_box { border: 1px {$borderStyle} #7AD975; }"."\n";
			echo ".warning_box { border: 1px {$borderStyle} #FE9A05; }"."\n";
			echo ".black_box { border: 1px {$borderStyle} #6E6E6E; }"."\n";
			echo ".black-caption_box { border: 1px {$borderStyle} #6E6E6E; }"."\n";
			echo ".black-body_box { border: 1px {$borderStyle} #000000; }"."\n";
			echo ".alert-caption_box, .download-caption_box, .info-caption_box, .warning-caption_box, .grey-caption_box { border-top-style: {$borderStyle}; border-right-style: {$borderStyle}; border-left-style: {$borderStyle}; }"."\n";
			echo ".alert-body_box, .download-body_box, .info-body_box, .warning-body_box, .grey-body_box { border-left-style: {$borderStyle}; border-right-style: {$borderStyle}; border-bottom-style: {$borderStyle}; }"."\n";
			echo '</style>'."\n";
			if(@file_exists(TEMPLATEPATH.'/wp-special-textboxes.css')) {
				echo '<link rel="stylesheet" href="'.get_stylesheet_directory_uri().'/wp-special-textboxes.css" type="text/css" media="screen" />'."\n";	
			} else {
				echo '<link rel="stylesheet" href="'.WP_PLUGIN_URL.'/wp-special-textboxes/css/wp-special-textboxes.css" type="text/css" media="screen" />'."\n";
			}
			if ($stextboxesOptions['rounded_corners'] == "true") {
				if(@file_exists(TEMPLATEPATH.'/wp-special-textboxes-corners.css')) {
					echo '<link rel="stylesheet" href="'.get_stylesheet_directory_uri().'/wp-special-textboxes-corners.css" type="text/css" media="screen" />'."\n";	
				} else {
					echo '<link rel="stylesheet" href="'.WP_PLUGIN_URL.'/wp-special-textboxes/css/wp-special-textboxes-corners.css" type="text/css" media="screen" />'."\n";
				}
			}	
			if ($stextboxesOptions['text_shadow'] == "true") {
				if(@file_exists(TEMPLATEPATH.'/wp-special-textboxes-textshadow.css')) {
					echo '<link rel="stylesheet" href="'.get_stylesheet_directory_uri().'/wp-special-textboxes-textshadow.css" type="text/css" media="screen" />'."\n";	
				} else {
					echo '<link rel="stylesheet" href="'.WP_PLUGIN_URL.'/wp-special-textboxes/css/wp-special-textboxes-textshadow.css" type="text/css" media="screen" />'."\n";
				}
			}
			if ($stextboxesOptions['box_shadow'] == "true") {
				if(@file_exists(TEMPLATEPATH.'/wp-special-textboxes-boxshadow.css')) {
					echo '<link rel="stylesheet" href="'.get_stylesheet_directory_uri().'/wp-special-textboxes-boxshadow.css" type="text/css" media="screen" />'."\n";	
				} else {
					echo '<link rel="stylesheet" href="'.WP_PLUGIN_URL.'/wp-special-textboxes/css/wp-special-textboxes-boxshadow.css" type="text/css" media="screen" />'."\n";
				}
			}
			echo '<!-- End Of Script Generated By wp-special-textboxes 0.2.1 -->'."\n";
		}
		
		function doShortcode( $atts, $content = null ) {
			$stextbox_classes = array( 'alert', 'download', 'info', 'warning', 'black' );
			extract( shortcode_atts( array(
				'id' => 'warning',
				'caption' => ''), 
				$atts ) );
			if ( $caption === '') {
				if ( in_array( $id, $stextbox_classes ) ) {
					return "<div class='{$id}_box'>" . do_shortcode($content) . "</div>";
				} elseif ( $id === 'grey' ) {
					return "<div class='{$id}_box'>{$content}</div>";
				} else { 
					return do_shortcode($content);	
				}
			} else {
				if ( in_array( $id, $stextbox_classes ) ) {
					return "<div class='{$id}-caption_box'>" . $caption . "</div><div class='{$id}-body_box'>" . do_shortcode($content) . "</div>";
				} elseif ( $id === 'grey' ) {
					return "<div class='{$id}-caption_box'>{$caption}</div><div class='{$id}-body_box'>{$content}</div>";
				} else { 
					return do_shortcode($content);	
				}
			}   
		}
		
		function doShortcodeGrey( $atts, $content = null ) {
			extract( shortcode_atts( array(
				'caption' => '',
				), $atts ) );
			if ( $caption === '' ) {
				return "<div class='grey_box'>{$content}</div>";
			} else { 
				return "<div class='grey-caption_box'>{$caption}</div><div class='grey-body_box'>{$content}</div>";	
			}
		}
		
		function regAdminPage() {
			if (function_exists('add_options_page')) {
				add_options_page(__('Special Text Boxes', 'wp-special-textboxes'), __('Special Text Boxes', 'wp-special-textboxes'), 8, basename(__FILE__), array(&$this, 'printAdminPage'));
			}
		} 
		
		//Prints out the admin page
		function printAdminPage() {
			$stextboxesOptions = $this->getAdminOptions();
			if (isset($_POST['update_specialTextBoxesSettings'])) {
				if (isset($_POST['stextboxesCorners'])) {
					$stextboxesOptions['rounded_corners'] = $_POST['stextboxesCorners'];
				}
				if (isset($_POST['stextboxesTextShadow'])) {
					$stextboxesOptions['text_shadow'] = $_POST['stextboxesTextShadow'];
				}
				if (isset($_POST['stextboxesBoxShadow'])) {
					$stextboxesOptions['box_shadow'] = $_POST['stextboxesBoxShadow'];
				}
				if (isset($_POST['stextboxesBorderStyle'])) {
					$stextboxesOptions['border_style'] = $_POST['stextboxesBorderStyle'];
				}
				update_option($this->adminOptionsName, $stextboxesOptions);
				?>
<div class="updated"><p><strong><?php _e("Special Text Boxes Settings Updated.", "wp-special-textboxes");?></strong></p></div>        
				<?php
			} ?>
<div class=wrap>
<form method="post" action="<?php echo $_SERVER["REQUEST_URI"]; ?>">
<div id="icon-options-general" class="icon32"></div>
<h2><?php _e("Special Text Boxes Settings", "wp-special-textboxes"); ?></h2>
<div id="poststuff" class="ui-sortable">
	<div class="postbox opened">
		<h3><?php _e('Basic Settings', 'wp-special-textboxes'); ?></h3>
		<div class="inside">
			<p><strong><?php _e("Select border style for Special Text Boxes", "wp-special-textboxes"); ?></strong>
			<br/><?php _e('Selecting "None" will disable Special Text Boxes border.', 'wp-special-textboxes'); ?></p>
			<p><label for="stextboxesBorderStyle_solid"><input type="radio" id="stextboxesBorderStyle_solid" name="stextboxesBorderStyle" value="solid" <?php if ($stextboxesOptions['border_style'] == "solid") { _e('checked="checked"', "wp-special-textboxes"); }?> /> <?php _e('Solid', 'wp-special-textboxes');?></label>&nbsp;&nbsp;&nbsp;&nbsp;<label for="stextboxesBorderStyle_dashed"><input type="radio" id="stextboxesBorderStyle_dashed" name="stextboxesBorderStyle" value="dashed" <?php if ($stextboxesOptions['border_style'] == "dashed") { _e('checked="checked"', "wp-special-textboxes"); }?>/> <?php _e('Dashed', 'wp-special-textboxes');?></label>&nbsp;&nbsp;&nbsp;&nbsp;<label for="stextboxesBorderStyle_dotted"><input type="radio" id="stextboxesBorderStyle_dotted" name="stextboxesBorderStyle" value="dotted" <?php if ($stextboxesOptions['border_style'] == "dotted") { _e('checked="checked"', "wp-special-textboxes"); }?> /> <?php _e('Dotted', 'wp-special-textboxes');?></label>&nbsp;&nbsp;&nbsp;&nbsp;<label for="stextboxesBorderStyle_none"><input type="radio" id="stextboxesBorderStyle_none" name="stextboxesBorderStyle" value="none" <?php if ($stextboxesOptions['border_style'] == "none") { _e('checked="checked"', "wp-special-textboxes"); }?>/> <?php _e('None', 'wp-special-textboxes');?></label></p>
		</div>
	</div>
</div>
<div id="poststuff" class="ui-sortable">
	<div class="postbox opened">
		<h3><?php _e('Extended Settings', 'wp-special-textboxes'); ?></h3>
		<div class="inside">
			<p><?php _e('Parameters below add elements of CSS3 standard to Style Sheet. Not all browsers can interpret this elements properly, but including this elements to HTML page not crash browser.', 'wp-special-textboxes'); ?> <br/><br/></p>
			<p><strong><?php _e("Allow rounded corners for Special Text Boxes?", "wp-special-textboxes"); ?></strong>
			<br/><?php _e('Selecting "No" will disable Special Text Boxes rounded corners.', 'wp-special-textboxes'); ?></p>
			<p><label for="stextboxesCorners_yes"><input type="radio" id="stextboxesCorners_yes" name="stextboxesCorners" value="true" <?php if ($stextboxesOptions['rounded_corners'] == "true") { _e('checked="checked"', "wp-special-textboxes"); }?> /> <?php _e('Yes', 'wp-special-textboxes');?></label>&nbsp;&nbsp;&nbsp;&nbsp;<label for="stextboxesCorners_no"><input type="radio" id="stextboxesCorners_no" name="stextboxesCorners" value="false" <?php if ($stextboxesOptions['rounded_corners'] == "false") { _e('checked="checked"', "wp-special-textboxes"); }?>/> <?php _e('No', 'wp-special-textboxes');?></label></p>
			<br/>
			<p><strong><?php _e("Allow box shadow for Special Text Boxes?", "wp-special-textboxes"); ?></strong>
			<br/><?php _e('Selecting "No" will disable Special Text Boxes shadow.', 'wp-special-textboxes'); ?></p>
			<p><label for="stextboxesBoxShadow_yes"><input type="radio" id="stextboxesBoxShadow_yes" name="stextboxesBoxShadow" value="true" <?php if ($stextboxesOptions['box_shadow'] == "true") { _e('checked="checked"', "wp-special-textboxes"); }?> /> <?php _e('Yes', 'wp-special-textboxes');?></label>&nbsp;&nbsp;&nbsp;&nbsp;<label for="stextboxesBoxShadow_no"><input type="radio" id="stextboxesBoxShadow_no" name="stextboxesBoxShadow" value="false" <?php if ($stextboxesOptions['box_shadow'] == "false") { _e('checked="checked"', "wp-special-textboxes"); }?>/> <?php _e('No', 'wp-special-textboxes');?></label></p>
			<br/>
			<p><strong><?php _e('Allow text shadow for Special Text Boxes?', 'wp-special-textboxes');?></strong>
			<br/><?php _e('Selecting "No" will disable Special Text Boxes text shadow.', 'wp-special-textboxes');?></p>
			<p><label for="stextboxesTextShadow_yes"><input type="radio" id="stextboxesTextShadow_yes" name="stextboxesTextShadow" value="true" <?php if ($stextboxesOptions['text_shadow'] == "true") { _e('checked="checked"', "wp-special-textboxes"); }?> /> <?php _e('Yes', 'wp-special-textboxes');?></label>&nbsp;&nbsp;&nbsp;&nbsp;<label for="stextboxesTextShadow_no"><input type="radio" id="stextboxesTextShadow_no" name="stextboxesTextShadow" value="false" <?php if ($stextboxesOptions['text_shadow'] == "false") { _e('checked="checked"', "wp-special-textboxes"); }?>/> <?php _e('No', 'wp-special-textboxes');?></label></p>
		</div>
	</div>
</div>
<div class="submit">
	<input type="submit" class='button-primary' name="update_specialTextBoxesSettings" value="<?php _e('Update Settings', 'wp-special-textboxes') ?>" />
</div>
</form>
</div>      
      <?php
		} // End of function printAdminPage
	} // End of class SpecialTextBoxes
} // End of If

if (class_exists("SpecialTextBoxes")) {
	$minimus_special_textboxes = new SpecialTextBoxes();
}
?>